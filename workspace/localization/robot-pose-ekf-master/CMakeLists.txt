cmake_minimum_required(VERSION 3.5)
project(mobile_robot_ekf)

# Default to C99
if(NOT CMAKE_C_STANDARD)
  set(CMAKE_C_STANDARD 99)
endif()

# Default to C++14
if(NOT CMAKE_CXX_STANDARD)
  set(CMAKE_CXX_STANDARD 14)
endif()

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()

# find dependencies
find_package(ament_cmake REQUIRED)
find_package(rclcpp REQUIRED)
find_package(std_msgs REQUIRED)
find_package(geometry_msgs REQUIRED)
find_package(sensor_msgs REQUIRED)
find_package(nav_msgs REQUIRED)
find_package(tf2 REQUIRED)
find_package(tf2_ros REQUIRED)

if(BUILD_TESTING)
  find_package(ament_lint_auto REQUIRED)
  # the following line skips the linter which checks for copyrights
  # uncomment the line when a copyright and license is not present in all source files
  #set(ament_cmake_copyright_FOUND TRUE)
  # the following line skips cpplint (only works in a git repo)
  # uncomment the line when this package is not in a git repo
  #set(ament_cmake_cpplint_FOUND TRUE)
  ament_lint_auto_find_test_dependencies()
endif()

ament_package()

add_executable(gps_point_to_pose src/gps_point_to_pose.cpp)
ament_target_dependencies(gps_point_to_pose rclcpp nav_msgs std_msgs geometry_msgs tf2 tf2_ros) 



# install(TARGETS  
# gps_point_to_pose  
# DESTINATION lib/${PROJECT_NAME})

# install(DIRECTORY launch DESTINATION share/${PROJECT_NAME})
# install(
#         DIRECTORY include/
#         DESTINATION include
# )
install(
        DIRECTORY    launch
        DESTINATION  share/${PROJECT_NAME})
 
install(TARGETS
        gps_point_to_pose
        #executables must be installed at lib/{PROJECT_NAME},otherwise ros2 run can't find it
        DESTINATION lib/${PROJECT_NAME}
        )